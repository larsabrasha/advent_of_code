# Day 2

```elixir
test_input = """
A Y
B X
C Z
"""

input = File.read!("#{__DIR__}/inputs/day02.txt")
```

## Part 1

```elixir
defmodule Part1 do
  @rock 1
  @paper 2
  @scissors 3

  @win 6
  @draw 3
  @loss 0

  def calc(text) do
    case text do
      "A X" -> @rock + @draw
      "A Y" -> @paper + @win
      "A Z" -> @scissors + @loss
      "B X" -> @rock + @loss
      "B Y" -> @paper + @draw
      "B Z" -> @scissors + @win
      "C X" -> @rock + @win
      "C Y" -> @paper + @loss
      "C Z" -> @scissors + @draw
    end
  end
end

input
|> String.trim()
|> String.split("\n")
|> Enum.map(&Part1.calc/1)
|> Enum.sum()
```

## Part 2

```elixir
defmodule Part2 do
  @rock 1
  @paper 2
  @scissors 3

  @win 6
  @draw 3
  @loss 0

  def convert(text) do
    case text do
      "A X" -> "A Z"
      "A Y" -> "A X"
      "A Z" -> "A Y"
      "B X" -> "B X"
      "B Y" -> "B Y"
      "B Z" -> "B Z"
      "C X" -> "C Y"
      "C Y" -> "C Z"
      "C Z" -> "C X"
    end
  end

  def calc(text) do
    case text do
      "A X" -> @rock + @draw
      "A Y" -> @paper + @win
      "A Z" -> @scissors + @loss
      "B X" -> @rock + @loss
      "B Y" -> @paper + @draw
      "B Z" -> @scissors + @win
      "C X" -> @rock + @win
      "C Y" -> @paper + @loss
      "C Z" -> @scissors + @draw
    end
  end
end

input
|> String.trim()
|> String.split("\n")
|> Enum.map(&Part2.convert/1)
|> Enum.map(&Part2.calc/1)
|> Enum.sum()
```
